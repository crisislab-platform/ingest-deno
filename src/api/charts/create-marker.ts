import { error, IRequest } from "itty-router";
import { getDB, log } from "../../utils.ts";
import {
	ChartMarker,
	chartMarkerStyles,
	chartMarkerTypes,
} from "../../types.ts";
import { broadcastWebsocketMessage } from "../../connectionHandler.ts";

export default async function createMarker(request: IRequest) {
	const data: Partial<ChartMarker> = await request.json();
	console.log(data);

	if (!data.sensor_type) {
		return error(400, "Specify a sensor type");
	}

	if (!data.sensor_channel) {
		return error(400, "Specify a sensor channel");
	}

	if (!data.value) {
		return error(400, "Specify a value");
	}

	if (!data.label) {
		data.label = "";
	}

	if (!data.colour) {
		data.colour = "black";
	}

	if (typeof data.enabled !== "boolean") {
		data.enabled = true;
	}

	if (!data.style || !chartMarkerStyles.includes(data.style)) {
		data.style = "dashed";
	}

	if (!data.type || !chartMarkerTypes.includes(data.type)) {
		data.type = "fixed-value";
	}

	// Use DB autogenerated ID
	if ("id" in data) {
		delete data.id;
	}

	if (data.type) {
		if (!chartMarkerTypes.includes(data.type)) {
			data.type = "fixed-value";
		}
	}

	const sql = await getDB();

	const id = (
		await sql`INSERT INTO channel_markers ${sql(data)} RETURNING id;`
	)?.[0]?.["id"];
	log.info(`Created marker ${id}`);

	data.id = id;

	// Publish to websockets
	const message = {
		type: "add-markers",
		data: [data],
	};
	broadcastWebsocketMessage({
		message,
		filterTargets: {
			sensorTypes: [data.sensor_type],
		},
	});

	return new Response(id + "", { status: 201 });
}
